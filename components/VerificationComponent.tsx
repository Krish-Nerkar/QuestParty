import { useEffect, useState } from "react";
import { useRouter } from 'next/router'
import { Notyf } from 'notyf';
import 'notyf/notyf.min.css';
import confetti from 'canvas-confetti';
import { SpinnerCircularFixed } from 'spinners-react';
import { type } from "os";


export default function VerificationComponent(props){

    console.log(props, "props")

    //state variables
    const [loading, setLoading] = useState(false);
    const [errorMessage, setErrorMessage] = useState(null);
    const [ifDisabled, setIfDisabled] = useState(false);
    const [IsConnected, setIsConnected] = useState(false);
    let isCorrectNetwork = props.isCorrectNetwork


    const [notfy, setNotfy] = useState();

    //check if the user's wallet is connected
    async function isWalletConnected(){

        //gets the ethereum object injected by the wallet
        //@ts-ignore
        const {ethereum} = window;
  
        //request the user's accounts
        const accounts = await ethereum.request({method: 'eth_accounts'});
  
        /* 
          if the user has the wallet connected an array of accounts is returned 
          out of which we select the first one and if its not connected, we 
          receive an empty array
        */
        try{
          const account = accounts[0];
          if(account){
            setIsConnected(true)
          }else{
            setIsConnected(false)
          }
        }
        catch(err){
          const account = null;
          setIsConnected(false);
        }
  
      }
  

    useEffect(() => {
        //@ts-ignore
        setNotfy(new Notyf({
            duration: 5000,
        }));

        isWalletConnected();

        if(props.disabled){
            setIfDisabled(true);
        }
        else{
            setIfDisabled(false);
        }

        

        console.log(props.disabled);
    }, [props])

    function startConfetti(){
        var duration = 5 * 1000;
        var animationEnd = Date.now() + duration;
        var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

        function randomInRange(min, max) {
        return Math.random() * (max - min) + min;
        }

        var interval = setInterval(function() {
        var timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
            return clearInterval(interval);
        }

        var particleCount = 50 * (timeLeft / duration);
        // since particles fall down, start a bit higher than random
        confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } }));
        confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } }));
        }, 250);
    }

    //function to verify the tweet from the api verifyByUsername endpoint
    async function verify(){

        const custom_notyf = new Notyf({
            types: [
                {
                    type : 'info',
                    background : "#06C1FF",
                    icon : false
                }
            ],
            duration: 500000,
        });

        const notification = custom_notyf.open({
            type : 'info',
            message : 'Verifying tweet... Please Wait!'
        });

        //starts the loading icon
        setLoading(true);

        //the actual api call
        const res = await fetch("/api/verifyByUsername", {
            body: JSON.stringify({
                //@ts-ignore
                twitterUsername: document.getElementById("twt_input").value,
                contractAddress: props.contractAddress,
                userAddress: props.userAddress,
                questID: props.questID,
                tweet: props.tweet,
                totalClaimers : props.totalClaimers,
            }),
            headers: {
                "Content-Type": "application/json",
            },
            method: "POST",
        });

        //response from the api
        const result = await res.json();

        //if the api call was successful
        if (result.error) {
            setErrorMessage(result.error);
            setLoading(false);
            custom_notyf.dismiss(notification)
            //@ts-ignore
            notfy.error(result.error)
            return;
        }

        custom_notyf.dismiss(notification)
        //stop the loading icon
        setLoading(false);

        //@ts-ignore
        notfy.success("Quest Verified ðŸŽ‰!")

        //the tweet is verified and the page is being refreshed to reflect the same
        // props.reload()
        props.updateClaimerNumber(result.claimerNumber, result.totalClaimerNumber)


        startConfetti()

    }

    return(
        <div className = "h-full mt-2 rounded p-1 bg-gradient-to-r from-gradient-lightblue via-gradient-darkblue via-gradient-purple to-gradient-red transform duration-300 hover:scale-105">

        <div className = "h-full p-6 flex flex-col justify-center bg-gray-8 rounded font-bold text-3xl text-white font-serif">
            
            {
                ifDisabled ?
                <div className = "">
                    <span className = "text-blue-tweet">

                        {
                            IsConnected && isCorrectNetwork ?
                                <p>The party is over! ðŸŽ‰ </p>
                            :
                                !IsConnected ?
                                    <p>Connect your wallet to continue!</p>
                                :
                                    <p>Switch your network to continue!</p>

                        }
                    </span>

                
                    
                </div>
                : 
                <>
                    <span className = "text-blue-tweet">
                        VERIFY YOUR TWEET
                    </span>

                
                    <p className = "pt-3 text-white font-mono font-bold font-medium text-base mt-6">
                        Twitter Username
                    </p>
                    
                    <div className = "flex">
                        <p className = "absolute mt-7 ml-4">
                        <svg className="pointer-events-none w-4 h-4 " viewBox="0 0 60 69" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M58.9502 34.1064C58.665 39.8571 57.2393 44.3958 54.6729 47.7227C52.1064 51.0495 48.6727 52.7129 44.3716 52.7129C39.9279 52.7129 37.0763 50.7168 35.8169 46.7246C34.5337 48.7445 33.0604 50.2534 31.397 51.2515C29.7573 52.2257 28.0583 52.7129 26.2998 52.7129C22.9255 52.7129 20.3709 51.3346 18.6362 48.5781C16.9015 45.8216 16.2599 42.0076 16.7114 37.1362C17.0679 33.2153 17.959 29.7222 19.3848 26.6567C20.8343 23.5675 22.6878 21.1437 24.9453 19.3853C27.2266 17.6268 29.6147 16.7476 32.1099 16.7476C34.0347 16.7476 35.7575 17.009 37.2783 17.5317C38.7992 18.0308 40.5101 19.0288 42.4111 20.5259L40.5576 40.2729C40.1061 45.7622 41.627 48.5068 45.1201 48.5068C47.8053 48.5068 49.9797 47.1761 51.6431 44.5146C53.3065 41.8532 54.2095 38.3838 54.3521 34.1064C54.8035 24.8626 53.0807 17.8169 49.1836 12.9692C45.3102 8.12158 39.4051 5.69775 31.4683 5.69775C26.6919 5.69775 22.4502 6.8859 18.7432 9.26221C15.0361 11.6147 12.1133 15.0247 9.97461 19.4922C7.83594 23.9596 6.6359 29.1162 6.37451 34.9619C6.08936 40.8551 6.80225 45.9761 8.51318 50.3247C10.2241 54.6496 12.8262 57.9526 16.3193 60.2339C19.8363 62.5389 24.078 63.6914 29.0444 63.6914C31.1831 63.6914 33.3218 63.43 35.4604 62.9072C37.6229 62.3844 39.417 61.7072 40.8428 60.8755L42.1616 64.9746C40.6883 65.9014 38.7279 66.6618 36.2803 67.2559C33.8564 67.8499 31.397 68.147 28.9019 68.147C22.9611 68.147 17.8521 66.8044 13.5747 64.1191C9.29736 61.4577 6.08936 57.6081 3.95068 52.5703C1.83577 47.5563 0.920898 41.6868 1.20605 34.9619C1.49121 28.4271 2.95264 22.5576 5.59033 17.3535C8.22803 12.1257 11.8044 8.09782 16.3193 5.27002C20.8343 2.41846 25.9315 0.992676 31.6108 0.992676C37.5278 0.992676 42.6012 2.3234 46.8311 4.98486C51.0609 7.64632 54.2095 11.484 56.2769 16.498C58.3442 21.512 59.2354 27.3815 58.9502 34.1064ZM22.3789 37.1362C22.0462 40.5106 22.3551 43.1007 23.3057 44.9067C24.2799 46.7127 25.8127 47.6157 27.9038 47.6157C29.3296 47.6157 30.696 47.0098 32.0029 45.7979C33.3337 44.5859 34.4268 42.8512 35.2822 40.5938L35.3179 40.2729L36.9575 22.3438C35.6268 21.6546 34.201 21.3101 32.6802 21.3101C29.8999 21.3101 27.5949 22.724 25.7651 25.5518C23.9591 28.3796 22.8304 32.241 22.3789 37.1362Z" fill="#646464"/>
                            <path d="M58.9502 34.1064L59.949 34.156L59.9493 34.1488L58.9502 34.1064ZM35.8169 46.7246L36.7706 46.4237L36.1244 44.3757L34.9728 46.1884L35.8169 46.7246ZM31.397 51.2515L31.9078 52.1112L31.9115 52.109L31.397 51.2515ZM16.7114 37.1362L17.7072 37.2285L17.7073 37.2268L16.7114 37.1362ZM19.3848 26.6567L18.4795 26.2319L18.478 26.235L19.3848 26.6567ZM24.9453 19.3853L24.3348 18.5932L24.3308 18.5963L24.9453 19.3853ZM37.2783 17.5317L36.9532 18.4775L36.9665 18.4819L37.2783 17.5317ZM42.4111 20.5259L43.4068 20.6193L43.4576 20.0772L43.0298 19.7402L42.4111 20.5259ZM40.5576 40.2729L39.5619 40.1795L39.561 40.191L40.5576 40.2729ZM54.3521 34.1064L53.3532 34.0577L53.3529 34.0654L53.3526 34.0731L54.3521 34.1064ZM49.1836 12.9692L48.4023 13.5935L48.4042 13.5958L49.1836 12.9692ZM18.7432 9.26221L19.279 10.1065L19.2828 10.1041L18.7432 9.26221ZM9.97461 19.4922L9.07264 19.0604L9.97461 19.4922ZM6.37451 34.9619L7.37335 35.0102L7.37351 35.0066L6.37451 34.9619ZM8.51318 50.3247L7.58262 50.6908L7.5833 50.6926L8.51318 50.3247ZM16.3193 60.2339L16.8675 59.3975L16.8661 59.3966L16.3193 60.2339ZM35.4604 62.9072L35.2255 61.9352L35.223 61.9358L35.4604 62.9072ZM40.8428 60.8755L41.7947 60.5692L41.4136 59.3848L40.3389 60.0117L40.8428 60.8755ZM42.1616 64.9746L42.6941 65.8211L43.3514 65.4076L43.1136 64.6683L42.1616 64.9746ZM36.2803 67.2559L36.0444 66.2841L36.0422 66.2846L36.2803 67.2559ZM13.5747 64.1191L14.1064 63.2722L14.103 63.2701L13.5747 64.1191ZM3.95068 52.5703L3.02929 52.959L3.0302 52.9611L3.95068 52.5703ZM1.20605 34.9619L0.207005 34.9183L0.206952 34.9195L1.20605 34.9619ZM5.59033 17.3535L6.4823 17.8056L6.48313 17.804L5.59033 17.3535ZM16.3193 5.27002L16.8501 6.11752L16.8533 6.11551L16.3193 5.27002ZM56.2769 16.498L55.3524 16.8792L56.2769 16.498ZM22.3789 37.1362L23.3741 37.2343L23.3747 37.2281L22.3789 37.1362ZM23.3057 44.9067L22.4207 45.3725L22.4256 45.3815L23.3057 44.9067ZM32.0029 45.7979L31.3296 45.0585L31.323 45.0646L32.0029 45.7979ZM35.2822 40.5938L36.2173 40.9481L36.2621 40.8299L36.2761 40.7042L35.2822 40.5938ZM35.3179 40.2729L36.3118 40.3834L36.3128 40.3737L36.3137 40.364L35.3179 40.2729ZM36.9575 22.3438L37.9534 22.4348L38.0146 21.765L37.4174 21.4558L36.9575 22.3438ZM25.7651 25.5518L24.9256 25.0085L24.9224 25.0135L25.7651 25.5518ZM57.9514 34.0569C57.6727 39.6773 56.2843 43.9965 53.8811 47.1119L55.4646 48.3335C58.1942 44.7952 59.6574 40.0369 59.949 34.156L57.9514 34.0569ZM53.8811 47.1119C51.5092 50.1865 48.3713 51.7129 44.3716 51.7129V53.7129C48.9741 53.7129 52.7037 51.9124 55.4646 48.3335L53.8811 47.1119ZM44.3716 51.7129C42.2982 51.7129 40.6901 51.2482 39.4736 50.3966C38.2625 49.5488 37.3479 48.2538 36.7706 46.4237L34.8632 47.0255C35.5453 49.1876 36.6862 50.8867 38.3267 52.0351C39.9617 53.1796 42.0013 53.7129 44.3716 53.7129V51.7129ZM34.9728 46.1884C33.7539 48.1071 32.385 49.4924 30.8825 50.394L31.9115 52.109C33.7357 51.0144 35.3135 49.3819 36.661 47.2608L34.9728 46.1884ZM30.8861 50.3918C29.3875 51.2823 27.8634 51.7129 26.2998 51.7129V53.7129C28.2532 53.7129 30.1271 53.1692 31.9078 52.1111L30.8861 50.3918ZM26.2998 51.7129C23.2541 51.7129 21.0264 50.4986 19.4826 48.0455L17.7899 49.1107C19.7155 52.1706 22.5968 53.7129 26.2998 53.7129V51.7129ZM19.4826 48.0455C17.9109 45.548 17.2663 41.9856 17.7072 37.2285L15.7157 37.0439C15.2536 42.0297 15.8922 46.0952 17.7899 49.1107L19.4826 48.0455ZM17.7073 37.2268C18.055 33.4021 18.9215 30.0238 20.2915 27.0785L18.478 26.235C16.9964 29.4205 16.0807 33.0286 15.7155 37.0457L17.7073 37.2268ZM20.2901 27.0815C21.6855 24.1077 23.4483 21.8189 25.5598 20.1742L24.3308 18.5963C21.9273 20.4685 19.9831 23.0274 18.4795 26.2319L20.2901 27.0815ZM25.5558 20.1773C27.6903 18.5319 29.8688 17.7476 32.1099 17.7476V15.7476C29.3607 15.7476 26.7628 16.7217 24.3348 18.5932L25.5558 20.1773ZM32.1099 17.7476C33.9452 17.7476 35.5553 17.9969 36.9532 18.4774L37.6034 16.5861C35.9597 16.021 34.1241 15.7476 32.1099 15.7476V17.7476ZM36.9665 18.4819C38.3346 18.9308 39.9411 19.8536 41.7924 21.3115L43.0298 19.7402C41.0791 18.204 39.2637 17.1307 37.5901 16.5816L36.9665 18.4819ZM41.4155 20.4324L39.562 40.1795L41.5532 40.3664L43.4068 20.6193L41.4155 20.4324ZM39.561 40.191C39.3298 43.0018 39.5806 45.301 40.4849 46.933C41.4446 48.6649 43.0601 49.5068 45.1201 49.5068V47.5068C43.687 47.5068 42.7955 46.9764 42.2343 45.9637C41.6178 44.8511 41.3339 43.0333 41.5543 40.3549L39.561 40.191ZM45.1201 49.5068C48.2133 49.5068 50.6811 47.9406 52.4911 45.0446L50.7951 43.9846C49.2782 46.4116 47.3974 47.5068 45.1201 47.5068V49.5068ZM52.4911 45.0446C54.2757 42.1892 55.2051 38.5317 55.3515 34.1398L53.3526 34.0731C53.2138 38.2359 52.3372 41.5172 50.7951 43.9846L52.4911 45.0446ZM55.3509 34.1552C55.8086 24.7832 54.0733 17.4555 49.963 12.3427L48.4042 13.5958C52.0882 18.1783 53.7985 24.942 53.3532 34.0577L55.3509 34.1552ZM49.9648 12.345C45.8507 7.19605 39.6168 4.69775 31.4683 4.69775V6.69775C39.1934 6.69775 44.7697 9.04711 48.4024 13.5935L49.9648 12.345ZM31.4683 4.69775C26.5175 4.69775 22.0852 5.93204 18.2035 8.42033L19.2828 10.1041C22.8152 7.83977 26.8663 6.69775 31.4683 6.69775V4.69775ZM18.2073 8.41788C14.3224 10.8833 11.2816 14.4461 9.07264 19.0604L10.8766 19.924C12.9449 15.6034 15.7499 12.3462 19.279 10.1065L18.2073 8.41788ZM9.07264 19.0604C6.8664 23.669 5.64183 28.9613 5.37551 34.9172L7.37351 35.0066C7.62998 29.2712 8.80547 24.2503 10.8766 19.924L9.07264 19.0604ZM5.37568 34.9136C5.08542 40.9123 5.80812 46.1806 7.58262 50.6908L9.44375 49.9586C7.79637 45.7715 7.09329 40.798 7.37334 35.0102L5.37568 34.9136ZM7.5833 50.6926C9.3612 55.1867 12.0866 58.664 15.7725 61.0712L16.8661 59.3966C13.5658 57.2413 11.087 54.1124 9.44306 49.9568L7.5833 50.6926ZM15.7712 61.0703C19.4786 63.5001 23.9191 64.6914 29.0444 64.6914V62.6914C24.2368 62.6914 20.1939 61.5777 16.8675 59.3975L15.7712 61.0703ZM29.0444 64.6914C31.2654 64.6914 33.4838 64.4198 35.6979 63.8786L35.223 61.9358C33.1597 62.4402 31.1008 62.6914 29.0444 62.6914V64.6914ZM35.6954 63.8792C37.9218 63.341 39.8136 62.6336 41.3466 61.7393L40.3389 60.0117C39.0204 60.7808 37.324 61.4279 35.2255 61.9352L35.6954 63.8792ZM39.8908 61.1818L41.2097 65.2809L43.1136 64.6683L41.7947 60.5692L39.8908 61.1818ZM41.6292 64.1281C40.2783 64.9779 38.4297 65.7051 36.0444 66.2841L36.5161 68.2276C39.026 67.6184 41.0984 66.8248 42.6941 65.8211L41.6292 64.1281ZM36.0422 66.2846C33.6963 66.8596 31.3167 67.147 28.9019 67.147V69.147C31.4772 69.147 34.0166 68.8403 36.5183 68.2271L36.0422 66.2846ZM28.9019 67.147C23.1155 67.147 18.1981 65.8409 14.1064 63.2722L13.043 64.9661C17.506 67.7678 22.8067 69.147 28.9019 69.147V67.147ZM14.103 63.2701C10.0157 60.7269 6.9367 57.045 4.87117 52.1795L3.0302 52.9611C5.24201 58.1711 8.57905 62.1885 13.0464 64.9682L14.103 63.2701ZM4.87207 52.1817C2.82655 47.3322 1.92481 41.6157 2.20516 35.0043L0.206952 34.9195C-0.083016 41.758 0.845002 47.7805 3.02929 52.959L4.87207 52.1817ZM2.2051 35.0055C2.48481 28.5956 3.91636 22.8681 6.4823 17.8056L4.69836 16.9014C1.98891 22.2471 0.497614 28.2585 0.207005 34.9183L2.2051 35.0055ZM6.48313 17.804C9.04705 12.7223 12.5049 8.83902 16.8501 6.11752L15.7885 4.42252C11.1038 7.35662 7.40901 11.529 4.69753 16.9031L6.48313 17.804ZM16.8533 6.11551C21.1982 3.37138 26.1079 1.99268 31.6108 1.99268V-0.00732422C25.755 -0.00732422 20.4704 1.46553 15.7853 4.42453L16.8533 6.11551ZM31.6108 1.99268C37.3745 1.99268 42.2555 3.28735 46.2985 5.83125L47.3636 4.13847C42.947 1.35946 37.6811 -0.00732422 31.6108 -0.00732422V1.99268ZM46.2985 5.83125C50.3374 8.37258 53.357 12.04 55.3524 16.8792L57.2014 16.1169C55.0619 10.9281 51.7844 6.92006 47.3636 4.13847L46.2985 5.83125ZM55.3524 16.8792C57.3528 21.7309 58.2315 27.45 57.9511 34.0641L59.9493 34.1488C60.2392 27.313 59.3357 21.2932 57.2014 16.1169L55.3524 16.8792ZM21.3837 37.0381C21.0433 40.4914 21.3369 43.3132 22.4207 45.3725L24.1906 44.441C23.3734 42.8883 23.0492 40.5297 23.3741 37.2343L21.3837 37.0381ZM22.4256 45.3815C22.9858 46.4199 23.732 47.2425 24.6783 47.8001C25.6236 48.357 26.7113 48.6157 27.9038 48.6157V46.6157C27.0051 46.6157 26.2809 46.423 25.6935 46.0769C25.1071 45.7314 24.5998 45.1995 24.1858 44.4319L22.4256 45.3815ZM27.9038 48.6157C29.6407 48.6157 31.2393 47.8697 32.6829 46.5311L31.323 45.0646C30.1526 46.1498 29.0185 46.6157 27.9038 46.6157V48.6157ZM32.6763 46.5372C34.1561 45.1895 35.3243 43.3048 36.2173 40.9481L34.3471 40.2394C33.5292 42.3977 32.5112 43.9824 31.3296 45.0585L32.6763 46.5372ZM36.2761 40.7042L36.3118 40.3834L34.324 40.1625L34.2883 40.4833L36.2761 40.7042ZM36.3137 40.364L37.9534 22.4348L35.9617 22.2527L34.322 40.1819L36.3137 40.364ZM37.4174 21.4558C35.9424 20.6919 34.3586 20.3101 32.6802 20.3101V22.3101C34.0434 22.3101 35.3112 22.6173 36.4977 23.2317L37.4174 21.4558ZM32.6802 20.3101C29.4856 20.3101 26.8947 21.9653 24.9256 25.0085L26.6047 26.095C28.2951 23.4826 30.3142 22.3101 32.6802 22.3101V20.3101ZM24.9224 25.0135C22.9999 28.0237 21.843 32.0588 21.3831 37.0444L23.3747 37.2281C23.8178 32.4233 24.9184 28.7354 26.6079 26.09L24.9224 25.0135Z" fill="#646464"/>
                        </svg>
                        </p>
                        <input id = "twt_input" type = "text" className = "mt-4 pl-10 bg-transparent text-black border-2 border-gray-border w-full font-sans font-medium text-sm px-3 py-2 text-white rounded-md mt-0" placeholder = "layer3xyz"/>
                    </div>
                </>
            }

            

           


            {
                loading ?

                <div className="mt-7 flex justify-center items-center">
                    <SpinnerCircularFixed color = "#4672FF" secondaryColor = "#141414" thickness = {150} size = {50}/>
                </div>

                :

                ifDisabled ?

                null

                : 
                <button onClick = {verify} className = "mt-4 text-2xl bg-blue-1 rounded-md p-3 w-full ">
                    VERIFY
                </button>

            }




        </div>
        </div>

    )
}